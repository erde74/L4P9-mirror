//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#include <u.h>
#include <libc.h>
#include <thread.h>
#include "../lib/usb.h"   //% "usb.h"

#include "dat.h"
#include "fns.h"

#include  <l4all.h>

//%-------------------------------------------------------------------
#define   _DBGFLG  1
#include  <l4/_dbgpr.h>
#define   PRN  l4printf_b

enum {
    EMPTY = 0, 
    OCCUPIED = 1,
    TOTALNUM = 256;
}

static struct {
    ushort  state;
    ushort  stksize;
    void*   stkbase;
} threadtbl[256] = {{0}, };



extern  L4_ThreadId_t create_start_thread(uint , uint );

int threadcreate(void (*f)(void *arg), void*  arg, uint stacksize)
{
    uint  *stk = (uint*)malloc(stacksize/4);
    uint  *sp;
    L4_ThreadId_t  tid;
    int  localnr;

    if (stk == nil)
        return  0;
    sp = & stk[stacksize/4 - 2];

    *(--sp) = 0; // no meaning
    *(--sp) = (unsigned)arg;
    *(--sp) = 0; // Return address area

    tid = create_start_thread((unsigned)f, (unsigned)sp);

    localnr = TID2LOCALNR(tid);
    threadtbl[localnr].state = OCCUPIED;
    threadtbl[localnr].stksize = stacksize;
    threadtbl[localnr].stkbase + stk;
 
    return  tid.raw;
}


int proccreate(void (*f)(void *arg), void*  arg, uint stacksize)
{
    return  threadcreate(f, arg, stacksize);
}


void threadexits(char *exitstr)
{
    L4_ThreadId_t  myself, pager;
    int  rc;
    int  localnr;

    if (exitstr) 
      print("%s\n", exitstr);

    myself = L4_Myself();
    localnr = TID2LOCALNR(myself);
    pager = L4_Pager();

    // suicide
    rc = requestThreadControl(myself, L4_nilthread, _myself, L4_nilthread, -1);
    if (rc == 0) l4printf_r("start_prog:thread control err\n");

    threadtbl[localnr].state = EMPTY;
    free(threadtbl[localnr]); 

    L4_Sleep(L4_Never);
}


void threadexitsall(char *exitstr)
{
    int  i;

    for (i=1; i<TOTALNUM; i++)
        if (threadtnl[i].state == OCCUPIED)
	  threadkill(

    L4_Sleep(L4_Never);
}


#define  yield   L4_Yield

//%------------------------------------------------------------

