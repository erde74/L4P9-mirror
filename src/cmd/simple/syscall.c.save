//%%%%%%%%%%%%%%%%%%%%%%%%%%%

#include <u.h>
#include <libc.h>
//%  #include <sys.h>
#include <fcall.h>

#if  1  //%------------------------------
static void SET(void * x, ...){}
static void USED(void * x, ...){}
#define  STATIC  static
#endif //%------------------------------

STATIC  char	buf[4096];  //% original: 1048576
//% STATIC  char	buf[1048576];  
#define	NARG	5
STATIC  uintptr	arg[NARG];

/* system calls not defined in libc.h */
STATIC  int	sysr1(void);
STATIC  int	_stat(char*, char*);
STATIC  int	_fstat(int, char*);
STATIC  int	_errstr(char*);
STATIC  int	_wstat(char*, char*);
STATIC  int	_fwstat(int, char*);
STATIC  int	_read(int, void*, int);
STATIC  int	_write(int, void*, int);
STATIC  int	_read9p(int, void*, int);
STATIC  int	_write9p(int, void*, int);
STATIC  int	brk_(void*);
STATIC  int	_nfstat(int, void*, int);
STATIC  int	_nstat(char*, void*, int);
STATIC  int	_nfwstat(int, void*, int);
STATIC  int	_nwstat(char*, void*, int);
STATIC  int	_fsession(char*, void*, int);
STATIC  int	_mount(int, char*, int, char*);
STATIC  int	_wait(void*);
STATIC  int     _d(void*);  //%

STATIC  
struct{
        int     syscallnum;
	char	*name;
        int	(*func)(void*, ...);
}
tab[] = {   //% imcompatible type warnings are ignored 
  // #include "tab.h"
  {0, "sysr1",    sysr1 },	// a
  {1, "_errstr",  _errstr},	// s
  {2, "bind",     bind   },	// ssi
  {3, "chdir",    chdir  },
  {4, "close",    close  },	// i
  {5, "dup",      dup    },	// ii
  {6, "alarm",    alarm  },	// i
  {7, "exec",     exec   },	// s?
  {8, "exits",    exits   }, 	// s
  {9, "_fsession",     _fsession },	// sai
  {10, "fauth",   fauth    },		// is
  {11, "_fstat",  _fstat   },		// is
  {12, "segbrk",  segbrk   },		// aa
  {13, "_mount",  _mount   },	// isis
  {14, "_mount",  open     },	// si
  {15, "read",    read     },	// iai
  {16, "oseek",   oseek    }, 	// iii
  {17, "sleep",   sleep    },     //  i
  {18, "_stat",   _stat    },	// ss
  {19, "rfork",   rfork    },	// i
  {20, "write",   write    },	// iai
  {21, "pipe",    pipe     }, 	// a
  {22, "create",   create  }, 	// sii
  {23, "fd2path",  fd2path }, 	// isi
  {24, "brk",      brk      },	// a
  {25, "remove",   remove   },	// s
  {26, "_wstat",   _wstat   },	// ss
  {27, "_fwstat",  _fwstat  }, 	// is
  {28, "notify",   notify   }, 	// a
  {29, "noted",    noted    },  	// i
  {30, "segattach",   segattach}, // isai
  {31, "segdetach,",  segdetach}, // a
  {32, "segfree",     segfree } , // ai
  {33, "segflush",    segflush }, // ai
  {34, "rendezvous",  rendezvous},// aa
  {35, "unmount",     unmount   },// ss
  {36, "wait",        wait      },//
  {37, "semacquire,", semacquire},// ai
  {38, "semrelease,", semrelease},// ai
  {39, "seek",        seek      },// iii
  {40, "fversion",    fversion  },// iisi
  {41, "errstr",      errstr    },// si
  {42, "stat",        stat      },// s?i
  {43, "fstat",     fstat     },	// i?i
  {44, "wstat",     wstat     },	// s?i
  {45, "fwstat",    fwstat    },	// i?i
  {46, "mount",     mount     },	// iisis
  {47, "await",     await     },	// si
  {50, "pread",     pread     },	// iaii
  {51, "pwrite",    pwrite    },	// iaii
  {52, "_d",        _d        },  // sa

  {0,	0,	0}
};

STATIC  uintptr parse(char *);
STATIC  void catch(void*, char*);

STATIC  char*
xctime(ulong t)
{
	char *buf, *s;

	s = ctime(t);
	s[strlen(s)-1] = '\0';	/* remove newline */
	buf = malloc(512);
	if(buf == nil)
		sysfatal("can't malloc: %r");
	snprint(buf, 512, "%s (%lud)", s, t);
	return buf;
}


STATIC  char*
lstime(long l)
{
	static char buf[32];
	char *t;
	long clk;

	clk = time(0);
	t = ctime(l);
	/* 6 months in the past or a day in the future */
	if(l<clk-180L*24*60*60 || clk+24L*60*60<l){
		memmove(buf, t+4, 7);		/* month and day */
		memmove(buf+7, t+23, 5);		/* year */
	}else
		memmove(buf, t+4, 12);		/* skip day of week */
	buf[12] = 0;
	return buf;
}

#ifdef QSH //%-----------------------------------------------------

void qsh_syscall(char *arguments)
{
	int i, j, c;
	int oflag, xflag, sflag;
	vlong r;
	Dir d;
	char strs[1024];
	char ebuf[1024];

	fmtinstall('M', dirmodefmt);

	oflag = 0;
	xflag = 0;
	sflag = 0;

	

	for(i=1; i<argc; i++)
		arg[i-1] = parse(argv[i]);
	notify(catch);

#else //%----------------------------------------------------------
void
main(int argc, char *argv[])
{
	int i, j, c;
	int oflag, xflag, sflag;
	vlong r;
	Dir d;
	char strs[1024];
	char ebuf[1024];

	fmtinstall('M', dirmodefmt);

	oflag = 0;
	xflag = 0;
	sflag = 0;
	ARGBEGIN{
	case 'o':
		oflag++;
		break;
	case 's':
		sflag++;
		break;
	case 'x':
		xflag++;
		break;
	default:
		goto Usage;
	}ARGEND
	if(argc<1 || argc>1+NARG){
    Usage:
		fprint(2, "usage: syscall [-ox] entry [args; buf==8192 byte buffer]\n");
		fprint(2, "\tsyscall write 1 hello 5\n");
		fprint(2, "\tsyscall -o errstr buf 1024\n");
		fprint(2, "\tsyscall -[xs] stat file buf 1024\n");
		exits("usage");
	}
	for(i=1; i<argc; i++)
		arg[i-1] = parse(argv[i]);
	notify(catch);
#endif //%------------------------------------------------------------------------------

	for(i=0; tab[i].name; i++)
		if(strcmp(tab[i].name, argv[0])==0){
			/* special case for seek, pread, pwrite; vlongs are problematic */
			if(strcmp(argv[0], "seek") == 0)
				r=seek(arg[0], strtoll(argv[2], 0, 0), arg[2]);
			else if(strcmp(argv[0], "pread") == 0)
				r=pread(arg[0], (void*)arg[1], arg[2], strtoll(argv[4], 0, 0));
			else if(strcmp(argv[0], "pwrite") == 0)
				r=pwrite(arg[0], (void*)arg[1], arg[2], strtoll(argv[4], 0, 0));
			else
				r=(*tab[i].func)(arg[0], arg[1], arg[2], arg[3], arg[4]);
			if(r == -1){
				errstr(ebuf, sizeof ebuf);
				fprint(2, "syscall: return %lld, error:%s\n", r, ebuf);
			}else{
				ebuf[0] = 0;
				fprint(2, "syscall: return %lld, no error\n", r);
			}
			if(oflag)
				print("%s\n", buf);
			if(xflag){
				for(j=0; j<r; j++){
					if(j%16 == 0)
						print("%.4x\t", j);
					c = buf[j]&0xFF;
					if('!'<=c && c<='~')
						print(" %c ", c);
					else
						print("%.2ux ", c);
					if(j%16 == 15)
						print("\n");
				}
				print("\n");
			}
			if(sflag && r > 0){
				r = convM2D((uchar*)buf, r, &d, strs);
				if(r <= BIT16SZ)
					print("short stat message\n");
				else{
					print("[%s] ", d.muid);
					print("(%.16llux %lud %.2ux) ", d.qid.path, d.qid.vers, d.qid.type);
					print("%M (%luo) ", d.mode, d.mode);
					print("%c %d ", d.type, d.dev);
					print("%s %s ", d.uid, d.gid);
					print("%lld ", d.length);
					print("%s ", lstime(d.mtime));
					print("%s\n", d.name);
					print("\tmtime: %s\n\tatime: %s\n", xctime(d.mtime), xctime(d.atime));
				}
			}
			exits(ebuf);
		}
	fprint(2, "syscall: %s not known\n", argv[0]);
	exits("unknown");
}

STATIC  uintptr
parse(char *s)
{
	char *t;
	uintptr l;

	if(strcmp(s, "buf") == 0)
		return (uintptr)buf;
	
	l = strtoull(s, &t, 0);
	if(t>s && *t==0)
		return l;
	return (uintptr)s; 
}

STATIC  void
catch(void * _x, char *msg)
{
	fprint(2, "syscall: received note='%s'\n", msg);
	noted(NDFLT);
}
